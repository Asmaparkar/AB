#11 Na√Øve Bayes

from pyspark import SparkContext
from pyspark.sql import SQLContext
from pyspark.ml.classification import NaiveBayes
from pyspark.ml.evaluation import MulticlassClassificationEvaluator
from pyspark.ml.feature import VectorAssembler
from sklearn.metrics import confusion_matrix
from sklearn.datasets import load_iris
import pandas as pd

#Preparing the data step2
iris=load_iris()
df_iris=pd.DataFrame(iris.data,columns=iris.feature_names)
print(df_iris.head())

df_iris['label']=pd.Series(iris.target)
print(df_iris.head())
print(df_iris.tail())

#Step3- Define sql context and create the dataframe.
sc=SparkContext().getOrCreate()
sqlContext=SQLContext(sc)
data=sqlContext.createDataFrame(df_iris)
data.printSchema()

#Step4- Combine all the features of data and separate label while using vector assembler
features=iris.feature_names
va=VectorAssembler(inputCols=features, outputCol='features')
va_df=va.transform(data)
va_df=va_df.select(['features','label'])
va_df.show(3)

#Step5- Spliting the data into training and testing
(train,test)=va_df.randomSplit([0.9,0.1])

#Prediction and accurracy
#We will define decision tree classifier by using naive bayes class and fit the model on the train data
nb=NaiveBayes(smoothing=1.0,modelType="multinomial")
nb=nb.fit(train)
pred=nb.transform(test)
pred.show(3)

#step6- Will predict the test data and check the accurracy metrix
evaluator=MulticlassClassificationEvaluator(predictionCol="prediction")
acc=evaluator.evaluate(pred)
print("Prediction accurracy: ",acc)
y_pred=pred.select("prediction").collect()
y_orig=pred.select("label").collect()
cm=confusion_matrix(y_orig,y_pred)
print(cm)
sc.stop()
